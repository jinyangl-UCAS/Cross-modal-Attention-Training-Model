function [downwardRate, upwardRate, records] = ...
    NetworkSimulation_UnitRun(stimList, constList, paramList, rounds, records, deltaT, mode)
% Execute the simulation for certain rounds.

    % Initialize the simulation
    V_Din = stimList(1,1); V_Uin = stimList(1,2); A_Din = stimList(1,3); A_Uin = stimList(1,4);
    maxFiringRate = constList(1,1); baseline = constList(1,2); decayRate= constList(1,3);
    W_A = paramList(1,1); W_V = paramList(1,2);
    W_AM = paramList(1,3); W_MA = paramList(1,4);
    W_VM = paramList(1,5); W_MV = paramList(1,6);
    
    start = size(records, 2);
    records = [records, zeros(7, rounds)]; % VD, VU, AD, AU, SCD, SCU, time

    % Begin simulation for each round:
    for i=1:1:rounds
        deltaV_D = ReynoldsEquation(decayRate, maxFiringRate,...
            ( W_MV * (records(5, start) - baseline ) / maxFiringRate + V_Din),...
            ( W_V * (records(2, start) - baseline) / maxFiringRate + ...
                W_MV * (records(6, start) - baseline) / maxFiringRate),...
            records(1, start), baseline);
        deltaV_U = ReynoldsEquation(decayRate, maxFiringRate,...
            ( W_MV * (records(6, start) - baseline ) / maxFiringRate + V_Uin),...
            ( W_V * (records(1, start) - baseline) / maxFiringRate + ...
                W_MV * (records(5, start) - baseline) / maxFiringRate),...
            records(2, start), baseline);
        deltaA_D = ReynoldsEquation(decayRate, maxFiringRate,...
            ( W_MA * (records(5, start) - baseline ) / maxFiringRate + A_Din),...
            ( W_A * (records(4, start) - baseline) / maxFiringRate + ...
                W_MA * (records(6, start) - baseline) / maxFiringRate),...
            records(3, start), baseline);
        deltaA_U = ReynoldsEquation(decayRate, maxFiringRate,...
            ( W_MA * (records(6, start) - baseline ) / maxFiringRate + A_Uin),...
            ( W_A * (records(3, start) - baseline) / maxFiringRate + ...
                W_MA * (records(5, start) - baseline) / maxFiringRate),...
            records(4, start), baseline);
        deltaSC_D = ReynoldsEquation(decayRate, maxFiringRate,...
            ( W_VM * (records(1, start) - baseline ) / maxFiringRate +...
                W_AM * (records(3, start) - baseline ) / maxFiringRate),...
            ( W_VM * (records(2, start) - baseline) / maxFiringRate + ...
                W_AM * (records(4, start) - baseline) / maxFiringRate),...
            records(5, start), baseline);     
        deltaSC_U = ReynoldsEquation(decayRate, maxFiringRate,...
            ( W_VM * (records(2, start) - baseline ) / maxFiringRate +...
                W_AM * (records(4, start) - baseline ) / maxFiringRate),...
            ( W_VM * (records(1, start) - baseline) / maxFiringRate + ...
                W_AM * (records(3, start) - baseline) / maxFiringRate),...
            records(6, start), baseline);
        start = start+1;
        records(1, start) = records(1, start-1) + (deltaV_D * deltaT);
        records(2, start) = records(2, start-1) + (deltaV_U * deltaT);
        records(3, start) = records(3, start-1) + (deltaA_D * deltaT);
        records(4, start) = records(4, start-1) + (deltaA_U * deltaT);
        records(5, start) = records(5, start-1) + (deltaSC_D * deltaT);
        records(6, start) = records(6, start-1) + (deltaSC_U * deltaT);
        records(7, start) = records(7, start-1) + deltaT;       
    end
    
    if mode == 'A' % Audio is the strong stim    
        downwardRate=records(1,start);
        upwardRate=records(2,start);
    else % Vision is the strong stim    
        downwardRate=records(3,start);
        upwardRate=records(4,start);
    end
        
end

function [variation] = ReynoldsEquation(A, B, E, I, y, b)
    variation = ((B-y) * E - y * I - A * (y-b) )/B;
end